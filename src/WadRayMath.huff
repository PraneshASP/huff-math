
/* Interface */
#define function wadMul(uint256,uint256) nonpayable returns (uint256)
 


// /* Constants*/
#define constant WAD = 0xde0b6b3a7640000
#define constant HALF_WAD = 0x6f05b59d3b20000
#define constant RAY = FREE_STORAGE_POINTER()
#define constant HALF_RAY = FREE_STORAGE_POINTER()
#define constant WAD_RAY_RATIO = FREE_STORAGE_POINTER()
#define constant TYPE_UINT_MAX =  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

 

/* Methods */
#define macro WAD_MUL() = takes (0) returns (0) {

    /// Short circuit: Return zero if one of the inputs are zero
    0x04 calldataload    // [num1] STACK=> { num1 }
    dup1
    iszero return_zero jumpi
    
    0x24 calldataload    // [num2] STACK=> { num1, num2 }
    dup1
    iszero return_zero jumpi
     

    ///(uint256_max - HALF_WAD) / num2 > num1
    [HALF_WAD] 
    [TYPE_UINT_MAX]
    sub 
    dup2
    dup2
    div
    dup4
    swap1 
    gt return_result jumpi
    
    return_zero:
        0x00
        0x00 mstore
        0x20 0x00 return
    
    return_result:
        pop
        mul
        [HALF_WAD]
        add
        [WAD]
        swap1
        div
        0x00 mstore
        0x20 0x00 return

}

 

#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called.
    0x00 calldataload 
    
    // Extract the function singature
    0xe0 shr

    // Jump table
    dup1 __FUNC_SIG(wadMul) eq  wad_mul jumpi

    wad_mul:
        WAD_MUL()

}



 